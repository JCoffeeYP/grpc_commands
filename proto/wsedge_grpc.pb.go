// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/wsedge.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EdgeService_RecordCan_FullMethodName = "/edge_rpc.EdgeService/RecordCan"
)

// EdgeServiceClient is the client API for EdgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeServiceClient interface {
	RecordCan(ctx context.Context, opts ...grpc.CallOption) (EdgeService_RecordCanClient, error)
}

type edgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeServiceClient(cc grpc.ClientConnInterface) EdgeServiceClient {
	return &edgeServiceClient{cc}
}

func (c *edgeServiceClient) RecordCan(ctx context.Context, opts ...grpc.CallOption) (EdgeService_RecordCanClient, error) {
	stream, err := c.cc.NewStream(ctx, &EdgeService_ServiceDesc.Streams[0], EdgeService_RecordCan_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &edgeServiceRecordCanClient{stream}
	return x, nil
}

type EdgeService_RecordCanClient interface {
	Send(*CanData) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type edgeServiceRecordCanClient struct {
	grpc.ClientStream
}

func (x *edgeServiceRecordCanClient) Send(m *CanData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *edgeServiceRecordCanClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeServiceServer is the server API for EdgeService service.
// All implementations must embed UnimplementedEdgeServiceServer
// for forward compatibility
type EdgeServiceServer interface {
	RecordCan(EdgeService_RecordCanServer) error
	mustEmbedUnimplementedEdgeServiceServer()
}

// UnimplementedEdgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeServiceServer struct {
}

func (UnimplementedEdgeServiceServer) RecordCan(EdgeService_RecordCanServer) error {
	return status.Errorf(codes.Unimplemented, "method RecordCan not implemented")
}
func (UnimplementedEdgeServiceServer) mustEmbedUnimplementedEdgeServiceServer() {}

// UnsafeEdgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeServiceServer will
// result in compilation errors.
type UnsafeEdgeServiceServer interface {
	mustEmbedUnimplementedEdgeServiceServer()
}

func RegisterEdgeServiceServer(s grpc.ServiceRegistrar, srv EdgeServiceServer) {
	s.RegisterService(&EdgeService_ServiceDesc, srv)
}

func _EdgeService_RecordCan_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EdgeServiceServer).RecordCan(&edgeServiceRecordCanServer{stream})
}

type EdgeService_RecordCanServer interface {
	SendAndClose(*Empty) error
	Recv() (*CanData, error)
	grpc.ServerStream
}

type edgeServiceRecordCanServer struct {
	grpc.ServerStream
}

func (x *edgeServiceRecordCanServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *edgeServiceRecordCanServer) Recv() (*CanData, error) {
	m := new(CanData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EdgeService_ServiceDesc is the grpc.ServiceDesc for EdgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edge_rpc.EdgeService",
	HandlerType: (*EdgeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RecordCan",
			Handler:       _EdgeService_RecordCan_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/wsedge.proto",
}
